load_file("nrngui.hoc")xopen("$(NEURONHOME)/lib/hoc/noload.hoc")load_proc("nrnmainmenu")xopen("biophys_param.hoc")WT = 2.91e-4 //synaptic weight!!D = 1 //synapse per micron squared surfacebasaldist_ignore = 20apicdist_ignore = 40geom_nseg()parameters()init_channels()load_file("stim.ses")objref syn, nc, presoma syn = Exp2Syn[0]pre = NetStim[0]pre.number = 1pre.start = 1pre.noise = 0pre.interval = 10 //not importantnc = new NetCon(pre, syn)forall {  insert extr // to detect max depol  insert util // to hold vmax, vhmax, and distance from the model's root node}proc setdist() { // call after any change of nseg   // for use in plots of vmax and vhmax vs. distance from cell origin  forall for (x, 0) { dist_util(x) = distance(x) }  forsec basal for (x,0) { dist_util(x) *= -1 } // plot basilar values at negative path distances}setdist()proc errmsg() {  terr = 1  print "error: max v in ", $s1, " is later than tstop at location ", $2, "of ", secname()}proc errmsg2() {  print "location ", $1, "of ", secname(), " ignored because it is too close to soma"}proc arun() {  // start by hiding shape plots  // to prevent the simulation from being slow as molasses  objref gshvmax, gshvhmax  nc.delay = 0  nc.weight = WT  syn.tau1 = 0.2  syn.tau2 = 3  syn.e = v_init+70  terr = 0  tsurf = 0  tbsurf = 0  tasurf = 0  wzavg = 0  wbzavg = 0  wazavg = 0  forsec basal { // for each non-spine section in the cell    print "working on ", secname()    for (x,0) { // for each internal node of this section	  surf_util(x) = diam(x)*3.141592654*L/nseg	  Exp2Syn[0].loc(x)	        run() // automatically detect vmax_extr everywhere      vmax_util(x) = vmax_extr(x) // local max v	  if (tmax_extr(x)>=tstop) errmsg("synapse site", x)      vsmax_util(x) = soma.vmax_extr(0.5) // max v in soma      if (soma.tmax_extr(x)>=tstop) errmsg("soma", x)	  imax_util(x) = nc.weight * (vmax_util(x)-syn.e)	  zin_util(x) = - vsmax_util(x) / imax_util(x)      if (-dist_util(x) > basaldist_ignore) {		tsurf += surf_util(x)		tbsurf += surf_util(x)		wzavg += zin_util(x)*D*surf_util(x)		wbzavg += zin_util(x)*D*surf_util(x)	  } else {		errmsg2(x)	  }	}  }  forsec apical { // for each non-spine section in the cell    print "working on ", secname()    for (x,0) { // for each internal node of this section	  surf_util(x) = diam(x)*3.141592654*L/nseg      Exp2Syn[0].loc(x)	        run() // automatically detect vmax_extr everywhere      vmax_util(x) = vmax_extr(x) // local max v	  if (tmax_extr(x)>=tstop) errmsg("synapse site", x)      vsmax_util(x) = soma.vmax_extr(0.5) // max v in soma      if (soma.tmax_extr(x)>=tstop) errmsg("soma", x)	  imax_util(x) = nc.weight * (vmax_util(x)-syn.e)	  zin_util(x) = - vsmax_util(x) / imax_util(x)      if (dist_util(x) > apicdist_ignore) {		tsurf += surf_util(x)		tasurf += surf_util(x)		wzavg += zin_util(x)*D*surf_util(x)		wazavg += zin_util(x)*D*surf_util(x)	  } else {		errmsg2(x)	  }    }  }  if (terr==1) {    print "tstop too short to detect max v at one or more locations--"    print "scroll back to see error messages"    print "recommend increasing tstop and running another batch of simulations"  }wbzavg /= tbsurfwazavg /= tasurfwzavg /= tsurfprint "Weighted average of basal dendrite transfer impedance: ", wbzavg, " Mohm"print "Weighted average of apical dendrite transfer impedance: ", wazavg, " Mohm"print "Weighted average of transfer impedance: ", wzavg, " Mohm"print "Note:"print "First ", basaldist_ignore, " microns of basal dendrite length considered spine-free"print "First ", apicdist_ignore, " microns of apical dendrite length considered spine-free"}objref hbox, ghbox = new HBox()hbox.intercept(1)	//all following creations go into the "hbox" boxxpanel("")xlabel("Hide (NOT close) both")xlabel("PointProcessManager windows")xlabel("to speed up the calculation")xbutton("Run & Analyze","arun()")xvalue("D synapse count (synapse/micrometer^2) = ", "D", 2 )xvalue("WT synaptic weight (uS) = ", "WT", 2 )xvalue("Ignore prox length basal (um) = ", "basaldist_ignore", 2 )xvalue("Ignore prox length apical (um) = ", "apicdist_ignore", 2 )xpanel()hbox.intercept(0)	//ends intercept modehbox.map("Controls", 0, 200, 290, 600) //draw the box and its contents