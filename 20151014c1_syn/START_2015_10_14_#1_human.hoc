load_file("nrngui.hoc")xopen("$(NEURONHOME)/lib/hoc/noload.hoc")load_proc("nrnmainmenu")xopen("biophys_param.hoc")geom_nseg()parameters()//densities()drug()	init_channels()nruns = 0//xopen("session_EPSP.ses")xopen("session_AP.ses")//xopen("session_sub.ses")//xopen("session_empty.ses")objref zzzz = new Impedance()func rn() { local rn  //init()  // make sure all changes to g, c, ri etc. have taken effect  soma(.5) zz.loc(0.5)  // sets origin for impedance calculations to middle of soma  zz.compute(0)  // DC input R  soma(.5) { rn = zz.input(0.5) }  // rn is input R at middle of the soma  return rn}func rho() {   forsec apical {diam = 0.000001		 L = 0.000001			}  forsec basal {diam = 0.000001		 L = 0.000001			}  forsec collateral {diam = 0.000001		 L = 0.000001			}  soma.diam = 0.00001  soma.L = 0.00001   forsec myelin {diam = 0.000001		 L = 0.000001			}  forsec node {diam = 0.000001		 L = 0.000001			}	}xopen("init_synapses.hoc")init_syn_params()nsyn = mloc.nrowinit_syns(nsyn)proc init() {local saveDt, i	if (nruns < 1) {		print "Dry run"		finitialize(v_init)		fcurrent()		saveDt = dt		dt = .5		for i=1,545/dt fadvance()		dt = saveDt		init_channels()		Ra = 150		Rm = 25000		Cm = 1				if (cvode.active()) {			cvode.re_init()		} else {			fcurrent()		}		nruns += 1		frecord_init()	} else {		tonset = 550		for s=0, nsyn-1 {  			//jitter = r.uniform(-0, 0)  //to introduce jitter as in Fig. S14			cAMPA[s].onset = tonset //+ jitter			PRE[s].del_rel = tonset //+ jitter			cNMDA[s].gmax = 0			cAMPA[s].gmax = 0		} 			s = nsyn - nruns			for ss=s, nsyn-1 {  				cNMDA[ss].gmax = NMDAgmax				cAMPA[ss].gmax = AMPAgmax			}						print "Number of active synapses: ", nruns						finitialize(v_init)			fcurrent()			saveDt = dt			dt = .5			for i=1,545/dt fadvance()			dt = saveDt			init_channels()			Ra = 150			Rm = 25000			Cm = 1						if (cvode.active()) {				cvode.re_init()			} else {				fcurrent()			}			frecord_init()						nruns += 1			if (nruns > nsyn) {				nruns = 1			}		}	}