load_file("nrngui.hoc")xopen("$(NEURONHOME)/lib/hoc/noload.hoc")load_proc("nrnmainmenu")xopen("biophys_params.hoc")geom_nseg()parameters()//densities()drug()	init_channels()nruns = 0//xopen("session_EPSP.ses")//xopen("session_AP.ses")//xopen("session_sub.ses")objref zzzz = new Impedance()func rn() { local rn  //init()  // make sure all changes to g, c, ri etc. have taken effect  soma(.5) zz.loc(0.5)  // sets origin for impedance calculations to middle of soma  zz.compute(0)  // DC input R  soma(.5) { rn = zz.input(0.5) }  // rn is input R at middle of the soma  return rn}func rho() {   forsec apical {diam = 0.000001		 L = 0.000001			}  forsec basal {diam = 0.000001		 L = 0.000001			}  forsec collateral {diam = 0.000001		 L = 0.000001			}  soma.diam = 0.00001  soma.L = 0.00001   forsec myelin {diam = 0.000001		 L = 0.000001			}  forsec node {diam = 0.000001		 L = 0.000001			}	}xopen("init_synapses_e2s.hoc")init_syn_params()nsyn = mloc.nrowinit_syns(nsyn)objref svstatesvstate = new SaveState()objref fxopen("session_dryrun.ses")objref soma_voltage_tracessoma_voltage_traces = new Vector()soma_voltage_traces.record(&soma.v(0.5))objref f1tstopval = 550proc arun() {		print "Initializing parameters"		init_channels()		finitialize(v_init)				if (cvode.active()) {			cvode.re_init()		} else {			fcurrent()		}		frecord_init()				t = 0		dt = .5		continuerun(1)				finitialize(v_init)				if (cvode.active()) {			cvode.re_init()		} else {			fcurrent()		}		frecord_init()				dt = .5		continuerun(tstopval)						svstate.save()		f = new File("statese2s.dat")		svstate.fwrite(f)		f.close()				print "File states.dat saved"					strdef filename	sprint(filename, "dryrun2kHz.dat")		f1 = new File()	f1.wopen(filename)	soma_voltage_traces.printf(f1)	f1.close()}objref hbox, ghbox = new HBox()hbox.intercept(1)	//all following creations go into the "hbox" boxxpanel("")xlabel("Initializes parameters and saves state to file")xbutton("Run & Analyze","arun()")xbutton("Stop","stoprun=1")xvalue("tstop (ms) = ", "tstopval", 2 )xvalue("Vinit (mV) = ", "v_init", 2 )xpanel()hbox.intercept(0)	//ends intercept modehbox.map("Controls", 0, 200, 290, 600) //draw the box and its contents