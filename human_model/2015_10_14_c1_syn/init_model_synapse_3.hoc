load_file("nrngui.hoc")xopen("$(NEURONHOME)/lib/hoc/noload.hoc")load_proc("nrnmainmenu")xopen("biophys_param.hoc")geom_nseg()parameters()//densities()drug()	init_channels()nruns = 0//xopen("session_EPSP.ses")//xopen("session_AP.ses")//xopen("session_sub.ses")xopen("session_empty.ses")objref zzzz = new Impedance()func rn() { local rn  //init()  // make sure all changes to g, c, ri etc. have taken effect  soma(.5) zz.loc(0.5)  // sets origin for impedance calculations to middle of soma  zz.compute(0)  // DC input R  soma(.5) { rn = zz.input(0.5) }  // rn is input R at middle of the soma  return rn}func rho() {   forsec apical {diam = 0.000001		 L = 0.000001			}  forsec basal {diam = 0.000001		 L = 0.000001			}  forsec collateral {diam = 0.000001		 L = 0.000001			}  soma.diam = 0.00001  soma.L = 0.00001   forsec myelin {diam = 0.000001		 L = 0.000001			}  forsec node {diam = 0.000001		 L = 0.000001			}	}xopen("init_synapses.hoc")init_syn_params()nsyn = mloc.nrowinit_syns(nsyn)objref soma_voltage_tracessoma_voltage_traces = new Vector()soma_voltage_traces.record(&soma.v(0.5))objref svstatesvstate = new SaveState()objref fobjref f1for nruns = 0, nsyn {	if (nruns < 1) {		print "Dry run"		init_channels()		finitialize(-96)				if (cvode.active()) {			cvode.re_init()		} else {			fcurrent()		}		frecord_init()				dt = .5		continuerun(10)				print "Dry run 2"		init_channels()		finitialize(-96)				if (cvode.active()) {			cvode.re_init()		} else {			fcurrent()		}		frecord_init()				dt = .5		continuerun(545)		//for i=1,545 fadvance()		dt = .01		continuerun(546)		svstate.save()		f = new File("states.dat")		svstate.fwrite(f)		f.close()			} else {		tonset = 550		for s=0, nsyn-1 {  			//jitter = r.uniform(-0, 0)  //to introduce jitter as in Fig. S14			cAMPA[s].onset = tonset //+ jitter			PRE[s].del_rel = tonset //+ jitter			cNMDA[s].gmax = 0			cAMPA[s].gmax = 0		} 			s = nsyn - nruns			for ss=s, nsyn-1 {  				cNMDA[ss].gmax = NMDAgmax				cAMPA[ss].gmax = AMPAgmax			}						print "Active synapses: ", nruns //prints number of synapses with each run (re_init)						init_channels()			finitialize(-96)						f = new File("states.dat")			svstate.fread(f)			f.close()			svstate.restore()						if (cvode.active()) {				cvode.re_init()			} else {				fcurrent()			}			//dt = .5			//continuerun(545)			//for i=1,545 fadvance()			dt = .01			frecord_init()			continuerun(600)				}	//run()	strdef filename	sprint(filename, "run_%d.dat", nruns)		f1 = new File()	f1.wopen(filename)	soma_voltage_traces.printf(f1)	f1.close()}objref hbox, ghbox = new HBox()hbox.intercept(1)	//all following creations go into the "hbox" boxxpanel("")xlabel("1 - 9 synapses will be activated")xvalue("AMPA gmax (uS) = ", "AMPAgmax", 2 )xvalue("NMDA gmax (pS) = ", "NMDAgmax", 2 )//xbutton("Run & Analyze","arun()")//xbutton("Stop","stoprun=1")//xvalue("dt (ms) = ", "dtrun", 2 )//xvalue("tstop (ms) = ", "tstopval", 2 )xpanel()hbox.intercept(0)	//ends intercept modehbox.map("Controls", 0, 200, 250, 250) //draw the box and its contents